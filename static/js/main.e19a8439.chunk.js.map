{"version":3,"sources":["currency.jpg","actions/enum.tsx","actions/getExchangeRate.ts","App.tsx","reducers/interfaces.tsx","reducers/currency.tsx","reducers/rate.ts","reducers/index.tsx","store/index.tsx","index.tsx"],"names":["module","exports","actionCurrency","actionTypeRate","Placeholder","Field","getExchangeRate","dispatch","type","LOADING","fetch","then","data","json","USD_in","USD_out","EUR_in","EUR_out","RUB_EUR_in","RUB_EUR_out","RUB_in","RUB_out","USD_EUR_in","USD_EUR_out","USD_RUB_in","USD_RUB_out","BYN_EUR","Math","round","parseFloat","toString","BYN_RUB","BYN_USD","EUR_BYN","EUR_RUB","EUR_USD","RUB_BYN","RUB_EUR","RUB_USD","USD_BYN","USD_EUR","USD_RUB","time","Date","getTime","SUCCESS","catch","error","ERROR","Currency","options","value","label","GlobalStyle","createGlobalStyle","Input","styled","input","Img","img","Title","h4","WrapperUP","div","WrapperDown","Warning","h3","SelectCurrency","Select","Rate","connect","state","rate","loading","exchangeRate","useState","sellInput","setSellInput","buyInput","setBuyInput","selectedOptionSell","setSelectedOptionSell","selectedOptionBuy","setSelectedOptionBuy","timeFromUpdate","sellRate","buyRate","useEffect","handleChange","event","result","key","target","name","length","test","SELL","BUY","src","currency","placeholder","onChange","disabled","selected","initialState","mainCurrency","USD","rootReducer","combineReducers","action","BYN","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.e19a8439.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/currency.4d066587.jpg\";","// @ts-ignore\nexport enum actionCurrency {\n  BYN = 'SET_BYN',\n  USD = 'SET_USD',\n}\n\nexport enum actionTypeRate {\n  LOADING = 'GET_RATE_LOADING',\n  SUCCESS = 'LOAD_RATE_SUCCESS',\n  ERROR = 'LOAD_RATE_ERROR',\n}\n","import { ThunkDispatch } from 'redux-thunk'\nimport { actionTypeRate } from './enum'\n\nconst LINK_HEROKU_PROXY = 'https://cors-anywhere.herokuapp.com/'\nconst LINK_BANK = 'https://belarusbank.by/api/kursExchange'\n\nconst getExchangeRate = () => (dispatch: ThunkDispatch<{}, {}, any>) => {\n  dispatch({ type: actionTypeRate.LOADING })\n  fetch(`${LINK_HEROKU_PROXY}${LINK_BANK}`)\n    .then(data => data.json())\n    .then(data => data[0])\n    .then(data => {\n      const {\n        USD_in,\n        USD_out,\n        EUR_in,\n        EUR_out,\n        RUB_EUR_in,\n        RUB_EUR_out,\n        RUB_in,\n        RUB_out,\n        USD_EUR_in,\n        USD_EUR_out,\n        USD_RUB_in,\n        USD_RUB_out,\n      }: {\n        USD_in: string\n        USD_out: string\n        EUR_in: string\n        EUR_out: string\n        RUB_EUR_in: string\n        RUB_EUR_out: string\n        RUB_in: string\n        RUB_out: string\n        USD_EUR_in: string\n        USD_EUR_out: string\n        USD_RUB_in: string\n        USD_RUB_out: string\n      } = data\n      dispatch({\n        BYN_EUR: (\n          Math.round((1 / parseFloat(EUR_out)) * 10000) / 10000\n        ).toString(),\n        BYN_RUB: RUB_in,\n        BYN_USD: (\n          Math.round((1 / parseFloat(USD_out)) * 10000) / 10000\n        ).toString(),\n        EUR_BYN: EUR_in,\n        EUR_RUB: RUB_EUR_out,\n        EUR_USD: USD_EUR_out,\n        RUB_BYN: (\n          Math.round((1 / parseFloat(RUB_out)) * 10000) / 10000\n        ).toString(),\n        RUB_EUR: RUB_EUR_in,\n        RUB_USD: USD_RUB_out,\n        USD_BYN: USD_in,\n        USD_EUR: USD_EUR_in,\n        USD_RUB: USD_RUB_in,\n        time: new Date().getTime(),\n        type: actionTypeRate.SUCCESS,\n      })\n    })\n    .catch((error: string) => {\n      dispatch({\n        error,\n        type: actionTypeRate.ERROR,\n      })\n    })\n}\n\nexport default getExchangeRate\n","import React, { FC, Fragment, useEffect, useState } from 'react'\nimport { connect } from 'react-redux'\nimport Select from 'react-select'\nimport { ThunkDispatch } from 'redux-thunk'\nimport styled, { createGlobalStyle } from 'styled-components'\nimport getExchangeRate from './actions/getExchangeRate'\nimport currency from './currency.jpg'\nimport { AppState } from './reducers'\n\ninterface AppType {\n  BYN_EUR: string\n  BYN_RUB: string\n  BYN_USD: string\n  EUR_BYN: string\n  EUR_RUB: string\n  EUR_USD: string\n  RUB_BYN: string\n  RUB_EUR: string\n  RUB_USD: string\n  USD_BYN: string\n  USD_EUR: string\n  USD_RUB: string\n  loading: boolean\n  time: string\n  error: string\n  exchangeRate: () => (dispatch: ThunkDispatch<{}, {}, any>) => void\n}\n\nenum Placeholder {\n  BUY = 'Покупка у банка',\n  SELL = 'Продажа банку',\n}\n\nenum Field {\n  BUY = 'buy',\n  SELL = 'sell',\n}\n\nconst MS_IN_3_HOURS = 3 * 60 * 60 * 100\n\nconst options = [\n  { value: 'USD', label: 'USD' },\n  { value: 'BYN', label: 'BYN' },\n  { value: 'RUB', label: 'RUB' },\n  { value: 'EUR', label: 'EUR' },\n]\n\nconst GlobalStyle = createGlobalStyle`\n  html {\n    height:100%;\n  }\n  body {    \n    display: flex; \n    flex-wrap: wrap;\n    align-items: center;\n    justify-content: center;\n    height: 100%;\n  }\n  #root {\n    border: 2px solid black;\n    width: 240px;\n    height: 250px;\n    padding: 10px;\n  }\n`\nconst Input = styled.input`\n  margin: 10px;\n  padding-right: 10px;\n  width: 130px;\n  height: 30px;\n  font-size: 12px;\n  border: 2px solid #cccccc;\n  border-radius: 10px;\n  background-color: #ffffff;\n  text-align: right;\n  outline: none;\n  &::-moz-focus-inner {\n    border: 0;\n  }\n  &:hover,\n  &:focus {\n    border: 2px solid #808080;\n  }\n  @media (max-width: 240px) {\n    width: 100px;\n    height: 25px;\n    font-size: 10px;\n  }\n`\nconst Img = styled.img`\n  display: block;\n  width: 34px;\n  height: 34px;\n  pointer-events: none;\n`\nconst Title = styled.h4`\n  display: inline-block;\n  margin: 10px;\n`\nconst WrapperUP = styled.div`\n  display: flex;\n  align-items: center;\n`\nconst WrapperDown = styled.div`\n  display: flex;\n  margin-top: 20px;\n  flex-wrap: wrap;\n  align-items: center;\n  &:nth-child(3) {\n    flex-basis: 100%;\n  }\n`\nconst Warning = styled.h3`\n  color: #ff0000;\n  text-align: center;\n`\n\nconst SelectCurrency = styled(Select)`\n  height: 20px;\n  width: 60px;\n  margin-bottom: 23px;\n  font-size: 14px;\n  text-align: center;\n  & > div {\n    & > div {\n      &:last-child {\n        & > div {\n          padding: 1px;\n          svg {\n            color: #808080;\n            width: 12px;\n          }\n        }\n      }\n    }\n  }\n`\n\nconst Rate = styled.h3`\n  text-align: center;\n`\n\ninterface SelectedOption {\n  value: string\n  label: string\n}\n\nconst App: FC<AppType> = state => {\n  const { exchangeRate, error, loading, time } = state\n  const [sellInput, setSellInput] = useState('')\n  const [buyInput, setBuyInput] = useState('')\n  const [selectedOptionSell, setSelectedOptionSell] = useState(options[0])\n  const [selectedOptionBuy, setSelectedOptionBuy] = useState(options[1])\n\n  const timeFromUpdate = new Date().getTime() - parseFloat(time) > MS_IN_3_HOURS\n\n  const sellRate =\n    selectedOptionSell.label === selectedOptionBuy.label\n      ? '1.0000'\n      : state[\n          `${selectedOptionSell.value}_${selectedOptionBuy.value}` as keyof AppType\n        ]\n\n  const buyRate =\n    selectedOptionSell.label === selectedOptionBuy.label\n      ? '1.0000'\n      : (\n          Math.round(\n            (1 /\n              parseFloat(state[\n                `${selectedOptionBuy.value}_${selectedOptionSell.value}` as keyof AppType\n              ] as string)) *\n              10000\n          ) / 10000\n        ).toString()\n\n  useEffect(() => {\n    exchangeRate()\n  }, [exchangeRate])\n\n  const getNewExchangeRate = () => {\n    if (timeFromUpdate) {\n      exchangeRate()\n    }\n    return\n  }\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    let result\n    const key = `${selectedOptionSell.value}_${selectedOptionBuy.value}` as keyof AppType\n    const { value, name } = event.target\n    getNewExchangeRate()\n    if (!value.length || error) {\n      setSellInput('')\n      setBuyInput('')\n      return\n    }\n    if (!/^\\d+[.]?\\d{0,4}$|^$/g.test(value)) {\n      return\n    }\n    if (value.length > 16) {\n      return\n    }\n    if (selectedOptionSell.label === selectedOptionBuy.label) {\n      setBuyInput(value)\n      setSellInput(value)\n      return\n    }\n    if (name === Field.SELL) {\n      if (/^0\\d$/.test(value)) {\n        setSellInput(value[1])\n        result = parseFloat(state[key] as any) * parseFloat(value[1])\n        setBuyInput((Math.round(result * 10000) / 10000).toString())\n        return\n      }\n      setSellInput(value)\n      result = parseFloat(state[key] as any) * parseFloat(value)\n      setBuyInput((Math.round(result * 10000) / 10000).toString())\n      return\n    }\n    if (name === Field.BUY) {\n      if (/^0\\d$/.test(value)) {\n        setBuyInput(value[1])\n        result = parseFloat(value[1]) / parseFloat(state[key] as any)\n        setSellInput((Math.round(result * 10000) / 10000).toString())\n        return\n      }\n      setBuyInput(value)\n      result = parseFloat(value) / parseFloat(state[key] as any)\n      setSellInput((Math.round(result * 10000) / 10000).toString())\n      return\n    }\n  }\n\n  const handleSelectedOptionSell = (selected: SelectedOption) => {\n    setSelectedOptionSell(selected)\n    if (!sellInput || error) {\n      setSellInput('')\n      setBuyInput('')\n      return\n    }\n    if (selected.value === selectedOptionBuy.value) {\n      setBuyInput(sellInput)\n      return\n    }\n    const key = `${selected.value}_${selectedOptionBuy.value}` as keyof AppType\n    const result = parseFloat(state[key] as string) * parseFloat(sellInput)\n    setBuyInput((Math.round(result * 10000) / 10000).toString())\n    return\n  }\n\n  const handleSelectedOptionBuy = (selected: SelectedOption) => {\n    setSelectedOptionBuy(selected)\n    if (!sellInput || error) {\n      setSellInput('')\n      setBuyInput('')\n      return\n    }\n    if (selectedOptionSell.label === selected.value) {\n      setBuyInput(sellInput)\n      return\n    }\n    const key = `${selectedOptionSell.value}_${selected.value}` as keyof AppType\n    const result = parseFloat(state[key] as string) * parseFloat(sellInput)\n    setBuyInput((Math.round(result * 10000) / 10000).toString())\n    return\n  }\n\n  return (\n    <Fragment>\n      <GlobalStyle />\n      <WrapperUP>\n        <Img src={currency} />\n        <Title>Конвертер валют</Title>\n      </WrapperUP>\n      <WrapperDown>\n        <Input\n          name={Field.SELL}\n          placeholder={Placeholder.SELL}\n          value={sellInput}\n          onChange={handleChange}\n          disabled={loading || error.length !== 0}\n        />\n        <SelectCurrency\n          options={options}\n          value={selectedOptionSell}\n          onChange={handleSelectedOptionSell as any}\n          disabled={loading || error.length !== 0}\n        />\n        <Input\n          name={Field.BUY}\n          value={buyInput}\n          placeholder={Placeholder.BUY}\n          onChange={handleChange}\n          disabled={loading || error.length !== 0}\n        />\n        <SelectCurrency\n          options={options}\n          value={selectedOptionBuy}\n          onChange={handleSelectedOptionBuy as any}\n          disabled={loading || error.length !== 0}\n        />\n      </WrapperDown>\n      {error.length === 0 && (\n        <Rate>\n          {sellRate}/{buyRate}\n        </Rate>\n      )}\n      {error.length !== 0 && timeFromUpdate && (\n        <Warning>Данные устарели</Warning>\n      )}\n      {error.length !== 0 && !timeFromUpdate && (\n        <Warning>Конвертер временно не работает</Warning>\n      )}\n    </Fragment>\n  )\n}\n\nconst mapStateToProps = (state: AppState) => ({\n  BYN_EUR: state.rate.BYN_EUR,\n  BYN_RUB: state.rate.BYN_RUB,\n  BYN_USD: state.rate.BYN_USD,\n  EUR_BYN: state.rate.EUR_BYN,\n  EUR_RUB: state.rate.EUR_RUB,\n  EUR_USD: state.rate.EUR_USD,\n  RUB_BYN: state.rate.RUB_BYN,\n  RUB_EUR: state.rate.RUB_EUR,\n  RUB_USD: state.rate.RUB_USD,\n  USD_BYN: state.rate.USD_BYN,\n  USD_EUR: state.rate.USD_EUR,\n  USD_RUB: state.rate.USD_RUB,\n  error: state.rate.error,\n  loading: state.rate.loading,\n  time: state.rate.time,\n})\n\nconst mapDispatchToProps = (dispatch: ThunkDispatch<{}, {}, any>) => ({\n  exchangeRate: () => dispatch(getExchangeRate()),\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App)\n","export enum Currency {\n  BYN = 'BYN',\n  USD = 'USD',\n}\n\nexport interface CurrencyState {\n  mainCurrency: Currency\n}\n","import { actionCurrency } from '../actions/enum'\nimport { Currency, CurrencyState } from './interfaces'\n\ninterface Action {\n  type: actionCurrency\n}\n\nconst initialState: CurrencyState = {\n  mainCurrency: Currency.USD,\n}\n\nexport const currencyReducer = (state = initialState, action: Action) => {\n  switch (action.type) {\n    case actionCurrency.USD:\n      return { ...state, mainCurrency: Currency.USD }\n\n    case actionCurrency.BYN:\n      return { ...state, mainCurrency: Currency.BYN }\n\n    default:\n      return state\n  }\n}\n","import { actionTypeRate } from '../actions/enum'\n\ninterface ActionRate {\n  type: actionTypeRate\n  BYN_EUR: string\n  BYN_RUB: string\n  BYN_USD: string\n  EUR_BYN: string\n  EUR_RUB: string\n  EUR_USD: string\n  RUB_BYN: string\n  RUB_EUR: string\n  RUB_USD: string\n  USD_BYN: string\n  USD_EUR: string\n  USD_RUB: string\n  time: string\n  error: string\n}\n\nconst initialState = {\n  BYN_EUR: '',\n  BYN_RUB: '',\n  BYN_USD: '',\n  EUR_BYN: '',\n  EUR_RUB: '',\n  EUR_USD: '',\n  RUB_BYN: '',\n  RUB_EUR: '',\n  RUB_USD: '',\n  USD_BYN: '',\n  USD_EUR: '',\n  USD_RUB: '',\n  error: '',\n  loading: true,\n  time: '',\n}\n\nexport const rateReducer = (state = initialState, action: ActionRate) => {\n  switch (action.type) {\n    case actionTypeRate.LOADING:\n      return {\n        ...state,\n        error: '',\n        loading: true,\n      }\n\n    case actionTypeRate.SUCCESS:\n      return {\n        ...state,\n        BYN_EUR: action.BYN_EUR,\n        BYN_RUB: action.BYN_RUB,\n        BYN_USD: action.BYN_USD,\n        EUR_BYN: action.EUR_BYN,\n        EUR_RUB: action.EUR_RUB,\n        EUR_USD: action.EUR_USD,\n        RUB_BYN: action.RUB_BYN,\n        RUB_EUR: action.RUB_EUR,\n        RUB_USD: action.RUB_USD,\n        USD_BYN: action.USD_BYN,\n        USD_EUR: action.USD_EUR,\n        USD_RUB: action.USD_RUB,\n        loading: false,\n        time: action.time,\n      }\n\n    case actionTypeRate.ERROR:\n      return {\n        ...state,\n        error: action.error,\n        loading: false,\n      }\n\n    default:\n      return state\n  }\n}\n","import { combineReducers } from 'redux'\nimport { currencyReducer } from './currency'\nimport { rateReducer } from './rate'\n\nexport const rootReducer = combineReducers({\n  currency: currencyReducer,\n  rate: rateReducer,\n})\n\nexport type AppState = ReturnType<typeof rootReducer>\n","import { applyMiddleware, createStore } from 'redux'\nimport thunk from 'redux-thunk'\n\nimport { rootReducer } from '../reducers'\n\nconst store = createStore(rootReducer, applyMiddleware(thunk))\n\nexport { store }\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport App from './App'\nimport { store } from './store'\n\nconst MyAppWithStore = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n)\n\nReactDOM.render(<MyAppWithStore />, document.querySelector('#root'))\n"],"sourceRoot":""}